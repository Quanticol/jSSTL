/*
 * generated by Xtext 2.12.0
 */
package eu.quanticol.jsstl.dsl.tests

import com.google.inject.Inject
import eu.quanticol.jsstl.dsl.jSSTLScript.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.xbase.testing.CompilationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import eu.quanticol.jsstl.formula.jSSTLScript
import static extension org.junit.Assert.*


@RunWith(XtextRunner)
@InjectWith(JSSTLScriptInjectorProvider)
class JSSTLScriptParsingTest {

	@Inject extension ParseHelper<Model> parser;
	
	@Inject extension ValidationTestHelper;
	 
    @Inject extension CompilationTestHelper
	
	@Test
	def testParserOne() {
		'''
const N = 10;
		
parameter kappa [ 0 , 100 ];
parameter epsilon [ -0.5 , 0.5 ];
		
variable x;
variable y;
variable z;
		
const M = N;
		
formula critical = <<>>[ -kappa , kappa ] { x > 0 };
formula somewherecritical = !critical;
formula safe = {y > 50};
formula managed = critical S[0,100] safe;
		'''.parse.assertNoErrors		
	}
	
	@Test
	def testCompilerOne() {
		'''
const N = 10;
		
parameter kappa [ 0 , 100 ];
parameter epsilon [ -0.5 , 0.5 ];
		
variable x;
variable y;
variable z;
		
const M = N;
		
formula critical = <<>>[ -kappa , kappa ] { x > 0 };
formula somewherecritical = !critical;
formula safe = {y > 50};
formula managed = critical S[0,100] safe;
		'''.compile[
			var o = getCompiledClass.newInstance 
            assertNotNull( o )
            assertTrue( o instanceof jSSTLScript )
		]		
	}
}
