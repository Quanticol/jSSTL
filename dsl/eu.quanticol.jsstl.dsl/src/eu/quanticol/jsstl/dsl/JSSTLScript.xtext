grammar eu.quanticol.jsstl.dsl.JSSTLScript with org.eclipse.xtext.common.Terminals

generate jSSTLScript "http://www.quanticol.eu/jsstl/dsl/JSSTLScript"

Model: {Model}
	(elements += Element)*;

Element:
	FormulaDeclaration | ConstDeclaration | ParameterDeclaration | VariableDeclarations
;

VariableDeclarations:
	'variable' name=ID ';'
;

ParameterDeclaration:
	'parameter' name=ID 'in' range=Interval ';' 
;

Interval:
	'[' min=Expression ',' max=Expression ']'	
;

ConstDeclaration:
	'const' name=ID '=' value=Expression ';'
;

ReferenceableElementInExpressions:
	ParameterDeclaration|ConstDeclaration|VariableDeclarations
;

//	OrExpression 
//;
//
//OrExpression returns Expression:
//	AndExpression ({OrExpression.left=current} '|' right=AndExpression )*
//;
//
//AndExpression returns Expression:
//	RelationExpression ({AndExpresion.left=current} '&' right=RelationExpression)*
//;

RelationExpression :
	SumDiffExpression (
		{LessRelationExpression.left=current} '<' right=SumDiffExpression
		| {LessOrEqualRelationExpression.left=current} '<=' right=SumDiffExpression
		| {EqualRelationExpression.left=current} '==' right=SumDiffExpression
		| {DisEqualRelationExpression.left=current} '!=' right=SumDiffExpression
		| {GreaterOrEqualRelationExpression.left=current} '>=' right=SumDiffExpression
		| {GreaterRelationExpression.left=current} '>' right=SumDiffExpression		
	)
;

Expression:
	SumDiffExpression
;
SumDiffExpression returns Expression:
	MulDivExpression (
		{SumExpression.left=current} '+' right=MulDivExpression
		| {DiffExpression.left=current} '-' right=MulDivExpression		
	)*
;

MulDivExpression returns Expression:
	BaseExpression (
		{MulExpression.left=current} '*' right=BaseExpression
		| {DivExpression.left=current} '/'right=BaseExpression
	)* 
;

BaseExpression returns Expression:
	IntExpression
	| FloatExpression
	| TrueFormula
	| FalseFormula
	| '(' Expression ')'
	| NotExpression
	| UnaryMinusExpression
	| LiteralExpression
;

FalseFormula: {FalseFormula}
	"false"
;

TrueFormula: {TrueFormula}
	"true"
;

LiteralExpression:
	reference=[ReferenceableElementInExpressions]
;

UnaryMinusExpression:
	'-' arg=BaseExpression	
;

NotExpression:
	'!' arg=BaseExpression
;

FloatExpression:
	intPart=INT '.' decPart=INT
;

IntExpression:
	value=INT	
;

FormulaDeclaration:
	'formula' name=ID '=' body=Formula ';'
;

Formula:
	OrFormula
;

OrFormula returns Formula:
	AndFormula ( {OrFormula.left=current} '|' right=AndFormula )*
;

AndFormula returns Formula:
	UntilFormula ({AndFormula.left=current} '&' right=UntilFormula)*
;

UntilFormula returns Formula:
	EventuallyGloballyFormula ({UntilFormula.left=current} '\\U'  interval=Interval right=EventuallyGloballyFormula)?
;

EventuallyGloballyFormula returns Formula:
	{GloballyFormula} '\\G' interval=Interval arg=SurroundFormula 
 	| {EventuallyFormula} '\\F' interval=Interval arg=SurroundFormula 
 	| SurroundFormula
;

SurroundFormula returns Formula:
	SomeEveryFormula ({SurroundFormula.left=current} '\\S' interval=Interval right=SomeEveryFormula)?
;

SomeEveryFormula returns Formula:
	{SomewhereFormula} '<<>>' interval=Interval arg=BaseFormula 
 	| {EverywhereFormula} '[[]]' interval=Interval arg=BaseFormula 
 	| BaseFormula
;

BaseFormula returns Formula:
	{AtomicFormula} '{' value=RelationExpression '}'
	| NotFormula
	| '(' Formula ')'
	| ReferencedFormula
;

ReferencedFormula:
	reference=[FormulaDeclaration]
;

NotFormula:
	'!' arg=BaseFormula	
;